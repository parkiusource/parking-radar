// Code generated by MockGen. DO NOT EDIT.
// Source: ./parking_lot_repository.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	domain "github.com/CamiloLeonP/parking-radar/internal/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIParkingLotRepository is a mock of IParkingLotRepository interface.
type MockIParkingLotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIParkingLotRepositoryMockRecorder
}

// MockIParkingLotRepositoryMockRecorder is the mock recorder for MockIParkingLotRepository.
type MockIParkingLotRepositoryMockRecorder struct {
	mock *MockIParkingLotRepository
}

// NewMockIParkingLotRepository creates a new mock instance.
func NewMockIParkingLotRepository(ctrl *gomock.Controller) *MockIParkingLotRepository {
	mock := &MockIParkingLotRepository{ctrl: ctrl}
	mock.recorder = &MockIParkingLotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParkingLotRepository) EXPECT() *MockIParkingLotRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIParkingLotRepository) Create(parkingLot *domain.ParkingLot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", parkingLot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIParkingLotRepositoryMockRecorder) Create(parkingLot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIParkingLotRepository)(nil).Create), parkingLot)
}

// Delete mocks base method.
func (m *MockIParkingLotRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIParkingLotRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIParkingLotRepository)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockIParkingLotRepository) GetByID(id uint) (*domain.ParkingLot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.ParkingLot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIParkingLotRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIParkingLotRepository)(nil).GetByID), id)
}

// GetByIDWithAdmin mocks base method.
func (m *MockIParkingLotRepository) GetByIDWithAdmin(parkingLotID uint, adminID string) (*domain.ParkingLot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithAdmin", parkingLotID, adminID)
	ret0, _ := ret[0].(*domain.ParkingLot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithAdmin indicates an expected call of GetByIDWithAdmin.
func (mr *MockIParkingLotRepositoryMockRecorder) GetByIDWithAdmin(parkingLotID, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithAdmin", reflect.TypeOf((*MockIParkingLotRepository)(nil).GetByIDWithAdmin), parkingLotID, adminID)
}

// List mocks base method.
func (m *MockIParkingLotRepository) List() ([]domain.ParkingLot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]domain.ParkingLot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIParkingLotRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIParkingLotRepository)(nil).List))
}

// Update mocks base method.
func (m *MockIParkingLotRepository) Update(parkingLot *domain.ParkingLot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", parkingLot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIParkingLotRepositoryMockRecorder) Update(parkingLot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIParkingLotRepository)(nil).Update), parkingLot)
}
