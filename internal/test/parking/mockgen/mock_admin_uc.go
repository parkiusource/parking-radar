// Code generated by MockGen. DO NOT EDIT.
// Source: ./admin_uc.go

// Package mocks is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	domain "github.com/CamiloLeonP/parking-radar/internal/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIAdminUseCase is a mock of IAdminUseCase interface.
type MockIAdminUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminUseCaseMockRecorder
}

// MockIAdminUseCaseMockRecorder is the mock recorder for MockIAdminUseCase.
type MockIAdminUseCaseMockRecorder struct {
	mock *MockIAdminUseCase
}

// NewMockIAdminUseCase creates a new mock instance.
func NewMockIAdminUseCase(ctrl *gomock.Controller) *MockIAdminUseCase {
	mock := &MockIAdminUseCase{ctrl: ctrl}
	mock.recorder = &MockIAdminUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminUseCase) EXPECT() *MockIAdminUseCaseMockRecorder {
	return m.recorder
}

// CompleteAdminProfile mocks base method.
func (m *MockIAdminUseCase) CompleteAdminProfile(adminID string, profileData domain.AdminProfileData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAdminProfile", adminID, profileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteAdminProfile indicates an expected call of CompleteAdminProfile.
func (mr *MockIAdminUseCaseMockRecorder) CompleteAdminProfile(adminID, profileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAdminProfile", reflect.TypeOf((*MockIAdminUseCase)(nil).CompleteAdminProfile), adminID, profileData)
}

// GetAdminProfile mocks base method.
func (m *MockIAdminUseCase) GetAdminProfile(adminID string) (*domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminProfile", adminID)
	ret0, _ := ret[0].(*domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminProfile indicates an expected call of GetAdminProfile.
func (mr *MockIAdminUseCaseMockRecorder) GetAdminProfile(adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminProfile", reflect.TypeOf((*MockIAdminUseCase)(nil).GetAdminProfile), adminID)
}

// GetParkingLotsByAdmin mocks base method.
func (m *MockIAdminUseCase) GetParkingLotsByAdmin(adminUUID string) ([]domain.ParkingLot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParkingLotsByAdmin", adminUUID)
	ret0, _ := ret[0].([]domain.ParkingLot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParkingLotsByAdmin indicates an expected call of GetParkingLotsByAdmin.
func (mr *MockIAdminUseCaseMockRecorder) GetParkingLotsByAdmin(adminUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParkingLotsByAdmin", reflect.TypeOf((*MockIAdminUseCase)(nil).GetParkingLotsByAdmin), adminUUID)
}

// RegisterAdmin mocks base method.
func (m *MockIAdminUseCase) RegisterAdmin(adminID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAdmin", adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAdmin indicates an expected call of RegisterAdmin.
func (mr *MockIAdminUseCaseMockRecorder) RegisterAdmin(adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdmin", reflect.TypeOf((*MockIAdminUseCase)(nil).RegisterAdmin), adminID)
}
